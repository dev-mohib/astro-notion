---
import type { SelectProperty } from '@lib/interfaces.ts'
import {
  getPostsByTagAndPage,
  getRankedPosts,
  getAllTags,
  getNumberOfPagesByTag,
} from '@lib/notion/client.ts'
import Layout from '@layouts/Layout.astro'
import NoContents from '@components/notion/NoContents.astro'
import PostDate from '@components/notion/PostDate.astro'
import PostTags from '@components/notion/PostTags.astro'
import PostTitle from '@components/notion/PostTitle.astro'
import PostFeaturedImage from '@components/notion/PostFeaturedImage.astro'
import PostExcerpt from '@/components/notion/PostExcerpt.astro'
import ReadMoreLink from '@/components/notion/ReadMoreLink.astro'
import Pagination from '@/components/notion/Pagination.astro'
import BlogPostsLink from '@components/notion/BlogPostsLink.astro'
import BlogTagsLink from '@components/notion/BlogTagsLink.astro'
import {getFeaturedImagePath, getTagLink, getPostLink, getDateStr, timeAgo } from '@/lib/blog-helpers.ts'

import styles from '@styles/blog.module.css'
import '@styles/notion-color.css'

export async function getStaticPaths() {
  const allTags = await getAllTags()

  let params = []

  await Promise.all(
    allTags.map((tag: SelectProperty) => {
      return getNumberOfPagesByTag(tag.name).then((numberOfPages: number) => {
        for (let i = 2; i <= numberOfPages; i++) {
          params.push({ params: { tag: tag.name, page: i.toString() } })
        }
      })
    })
  )

  return params
}

const { tag, page } = Astro.params

const [posts, rankedPosts, tags, numberOfPages] = await Promise.all([
  getPostsByTagAndPage(tag, parseInt(page, 10)),
  getRankedPosts(),
  getAllTags(),
  getNumberOfPagesByTag(tag),
])

const currentTag = posts[0].Tags.find((t) => t.name === tag)
---

<Layout
  title={`Posts in ${tag} ${page}/${numberOfPages}`}
  path={`/blogs/tag/${tag}/page/${page}`}
>
  <div class="pt-20">
    <header>
      <div class="tag-container">
        <span class={`tag ${currentTag.color}`}>{tag}</span>
        {page}/{numberOfPages}
      </div>
    </header>

    {
      posts.length === 0 ? (
        <NoContents contents={posts} />
      ) : (
        posts.map((post) => (
        <div class="w-full flex md:flex-row flex-col border-none my-5">
            <div class="md:w-1/2 w-full">
              <img class="rounded-t-lg w-full" src={getFeaturedImagePath(post)} alt="Featured image of the post" />
            </div>
            <div class="md:ml-5 pb-5 w-full">
              <a href={getPostLink(post.Slug)} class="font-bold text-2xl tracking-tight mb-2">{post?.Title??''}</a>
              <p class="">{post.Date ? timeAgo(post.Date) + ' ago' : ''} </p>
              <p class="font-normal mb-3 text-base-100">{post?.Excerpt ? post.Excerpt : ''}</p>
              <div>
                {
                  post?.Tags && post.Tags?.length > 0 &&
                      post.Tags.map((tag: SelectProperty) => {
                      if (false) { // enableLink property check
                          return (
                                  <a href={getTagLink(tag.name)} class={`tag ${tag.color} mx-1 px-1 py-0.5`}>
                                      {tag.name}
                                  </a>
                          )
                      }
                      return <span class={`tag ${tag.color} mx-1 px-1 py-0.5 rounded`}>{tag.name}</span>
                      })
                }
              </div>
            </div>
          </div>
        ))
      )
    }

    <div class="my-10">
      <Pagination
        tag={tag}
        currentPage={parseInt(page, 10)}
        numberOfPages={numberOfPages}
      />
    </div>
  </div>

  <div slot="aside" class={styles.aside}>
    <BlogPostsLink heading="Recommended" posts={rankedPosts} />
    <BlogTagsLink heading="Categories" tags={tags} />
  </div>
</Layout>

<style>
  .tag-container {
    margin: 0;
    line-height: 1.3;
    font-size: 1.2rem;
    font-weight: normal;
  }
  @media (max-width: 640px) {
    .tag-container {
      font-size: 1.15rem;
    }
  }
  .tag-container span.tag {
    border-radius: 4px;
    padding: 3px 9px;
    background: var(--tag-bg-light-gray);
  }
</style>
